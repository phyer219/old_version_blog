#+TITLE: NSR Calculate
#+DATE: <2019-07-03>
#+CATEGORIES: 专业笔记
#+TAGS: 物理, NSR Calculate
#+HTML: <!-- toc -->
#+HTML: <!-- more -->

* Free Energy vs. Renormalize Paramaters

** p-wave

*** cal

\begin{align}
  \delta^p(\vec{q}, z) =& \mathrm{Arg}\left[ \frac{Mk_{n^2}}{2}\frac{1}{R}
                 \left(
             \frac{1}{4\pi}\cdot \frac{2R}{k_n^2 v}
            + \tilde{z}\cdot\frac{1}{4\pi} 
           + \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z) 
                 \right)
                \right] \\
       =& \mathrm{Arg}\left[
             \frac{1}{4\pi}\cdot \frac{2R}{k_n^2 v}
            + \tilde{z}\cdot\frac{1}{4\pi} 
           + \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z + \mathrm{i}0^+) 
                \right]
\end{align}
其中 $\tilde{z}=z/E_n$ , $E_n = k_n^2/(2M)$ , $k_n^3 = 6\pi^2n$ , $n =
N/V$
\begin{align}
  \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z) =& (k_n R)\cdot\Pi_r \cdot \frac{2}{Mk_n^3}\\
  =& \tilde{R}\left[
     \frac{2}{Mk_n^3}\left( -\frac{M}{V} \right)\sum_{\vec{k}}1
     - \tilde{z}E_n \frac{M^2}{V}\frac{2}{Mk_n^3}\sum_{\vec{k}}\frac{1}{k^2}
     + \frac{2}{Mk_n^3}\Pi^{l=1}(\vec{q},z)
    \right] \\
  =& \tilde{R}\left[ 
           -\frac{1}{\pi^2}\int \mathrm{d}\tilde{k}\cdot \tilde{k}^2
           -\tilde{z} \frac{1}{2\pi^2}\int \mathrm{d}\tilde{k}
           +\tilde{\Pi}^{l=1}
          \right]
\end{align}
其中 $\tilde{R} = k_nR$ , $\tilde{k} = k/k_n$
\begin{align}
  \tilde{\Pi}^{l=1} = &\frac{2}{Mk_n^3}\Pi^{l=1}(\vec{q},\omega) \\
   =& \frac{2}{Mk_n^3}\frac{1}{V}\frac{V}{(2\pi)^3}\int \mathrm{d}\tilde{k}
    \left[
       k^2 \cdot 4\pi |Y_{lm}(\hat{k})|^2 
       \frac{1+n(\xi_{\vec{k}+\vec{q}/2}) + n(\xi_{-\vec{k}+\vec{q}/2})}
          {\xi_{\vec{k}+\vec{q}/2} + \xi_{-\vec{k}+\vec{q}/2} - \omega}
    \right] \\
   =& \frac{2}{\pi^2}\int \mathrm{d}\tilde{k}\cdot\tilde{k}^4\left[
           \frac{1+n(\xi_{\vec{k}+\vec{q}/2}) + n(\xi_{-\vec{k}+\vec{q}/2})}
          {\tilde{\xi}_{\vec{k}+\vec{q}/2} + \tilde{\xi}_{-\vec{k}+\vec{q}/2} - \tilde{\omega}}
             \right]
\end{align}
其中 $\tilde{\xi} = \xi/E_n$ , $\tilde{\omega} = \omega/E_n$ , $n(\xi)
= \frac{1}{e^{\beta \xi}-1}$

最终
\begin{align}
  \frac{\tilde{\Omega}}{N E_n} =& \frac{1}{N E_n}
    \frac{V}{(2\pi^3)}\int \mathrm{d}^3\vec{q}
   \cdot \int \frac{\mathrm{d}\omega}{\pi}\cdot \frac{1}{e^{\beta\omega}-1} \delta^p \\
   =& \frac{3}{\pi} \int \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot \frac{1}{e^{\tilde{\beta}\tilde{\omega}}-1} \tilde{\delta}^p(\vec{q},z)
\end{align}
其中 $\tilde{\beta} = \beta E_n$ . 得自由能
\begin{align}
  \frac{F}{NE_n} = \frac{\tilde{\Omega}}{N E_n} -\frac{\mu}{E_n}
\end{align}
即
\begin{align}
   f(\tilde{\mu}, \tilde{R}) = \tilde{\Omega}'(\tilde{\mu}, \tilde{R})-\tilde{\mu}
\end{align}
其中 $\tilde{\mu} = \mu/E_n$.

$\mu$ 由 
\begin{align}
  N = - \frac{\partial\Omega}{\partial \mu}
\end{align}
决定.

** 以 $\varepsilon$ 为单位

若以某一能量 $\varepsilon$ 为单位, 对应的长度单位 $k_{\varepsilon} =
\sqrt{2M\varepsilon}$  , 密度单位 $n_{\varepsilon} =
k_{\varepsilon}^3/(6\pi^2)$ , 那么
\begin{align}
\frac{\Omega}{N \varepsilon} = & \frac{n_{\varepsilon}}{n}\int 
        \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot\frac{3}{\pi}\cdot \frac{1}{e^{\tilde{\beta}\tilde{\omega}}-1} 
       \tilde{\delta}^p(\vec{q},z) \\
= & \frac{n_{\varepsilon}}{n}\int 
        \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot f(\tilde{q}, \tilde{\omega}, \tilde{\mu}, \tilde{\beta})
\end{align}
其中
\begin{align}
  f(\tilde{q}, \tilde{\omega}, \tilde{\mu}, \tilde{\beta}) = 
    \frac{3}{\pi}\cdot \frac{1}{e^{\tilde{\beta}\tilde{\omega}}-1} 
       \tilde{\delta}^p(\vec{q},z)
\end{align}
而
\begin{align}
  \frac{n}{n_{\varepsilon}} =& - \frac{1}{n_{\varepsilon}V}
        \frac{\partial\Omega}{\partial\mu} 
  =- \frac{1}{n_{\varepsilon}V}
        \frac{\partial\Omega/\mu}{\partial\tilde{\mu}}\\
  =& - \frac{1}{n_{\varepsilon}V}
        \frac{\partial}{\partial\tilde{\mu}}\left[
    V n_{\varepsilon} \int 
        \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot f(\tilde{q}, \tilde{\omega}, \tilde{\mu}, \tilde{\beta})
    \right] \\
 =& - \frac{\partial}{\partial\tilde{\mu}}\left[
     \int \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot f(\tilde{q}, \tilde{\omega}, \tilde{\mu}, \tilde{\beta})
    \right]
\end{align}
所以最终要求的为
\begin{align}
  \frac{\Delta F}{NE_n} =& \frac{\Omega}{NE_n} + \frac{\mu}{E_n} \\
   =&\frac{\Omega}{N\varepsilon}\left( \frac{\varepsilon}{E_n} \right)
     + \tilde{\mu} \left( \frac{\varepsilon}{E_n} \right) \\
  =&  \left( \frac{n_{\varepsilon}}{n} \right)^{5/3}
      \int\mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot f(\tilde{q}, \tilde{\omega}, \tilde{\mu}, \tilde{\beta})
     + \tilde{\mu} \left( \frac{n_{\varepsilon}}{n} \right)^{2/3} \\
\end{align}
横坐标为
\begin{align}
  \frac{2R}{k_n^2v} = \frac{2R}{k_{\varepsilon v}}\cdot
  \left( \frac{n_{\varepsilon}}{n} \right)^{2/3}
\end{align}

* result

file:./2019-07-03-专业笔记-NSRcal/F_mu=-.5.png

file:./2019-07-03-专业笔记-NSRcal/F_mu=-1.png

file:./2019-07-03-专业笔记-NSRcal/energy.png

file:./2019-07-03-专业笔记-NSRcal/R.png

#+BEGIN_SRC python
density_ 0 = 0.4511843038068619
density_ 1 = 0.46464476988195
density_ 2 = 0.512739788127714
density_ 3 = 0.5205848044309569
density_ 4 = 0.5398202496120774
density_ 5 = 0.5488560439470547
density_ 6 = 0.5631884264500897
density_ 7 = 0.582431469720035
density_ 8 = 0.6042962186203482
density_ 9 = 0.6415464826048378
density_ 10 = 0.6969732846417998
density_ 11 = 0.7208447810880259
density_ 12 = 0.7542687224804112
density_ 13 = 0.7566595683350386
density_ 14 = 0.7635199722466623
density_ 15 = 0.7869995988230016
density_ 16 = 0.9036469850176587
density_ 17 = 0.8960351322029325
density_ 18 = 0.9468071937579481
density_ 19 = 1.0046185078271819
density_ 20 = 1.059138232673007
density_ 21 = 1.0522590188077885
density_ 22 = 1.0641192649263331
density_ 23 = 1.2088744449911815
density_ 24 = 1.1731400462178243
density_ 25 = 1.1984336911741167
density_ 26 = 1.2847819197414623
density_ 27 = 1.3449764024731081
density_ 28 = 1.5511697870618235
density_ 29 = 1.5681899612207673
density_ 30 = 1.6533548419239708
density_ 31 = 1.6534808966461867
density_ 32 = 1.8122197242842475
density_ 33 = 1.9779679505393943
density_ 34 = 1.8354318176427853
density_ 35 = 1.9035665266287083
density_ 36 = 1.9722456778836772
density_ 37 = 2.1018017049012627
density_ 38 = 2.197603315989838
density_ 39 = 2.2246344988374744
density_ 40 = 2.224455952770654
density_ 41 = 2.2893875795126917
density_ 42 = 2.8156226350439795
density_ 43 = 2.8870750012899293
density_ 44 = 2.748934824214899
density_ 45 = -15.825491228582678
density_ 46 = 3.6662990199332057
density_ 47 = 3.6190382912693053
density_ 48 = 2.1343821154928833
density_ 49 = -0.07283571523686305
density_ 50 = -0.06803702046198623
density_ 51 = -0.06376424943610459
density_ 52 = -0.06065521418463504
density_ 53 = -0.058264026936427626
density_ 54 = -0.055524429498632344
density_ 55 = -0.05352935872338094
density_ 56 = -0.05148130810539442
density_ 57 = -0.04992932733927091
density_ 58 = -0.04847640067140446
density_ 59 = -0.04686022680999713
density_ 60 = -0.04514031370916882
density_ 61 = -0.04409104192859559
density_ 62 = -0.04293283506484613
density_ 63 = -0.04187323821014388
density_ 64 = -0.04074860449065909
density_ 65 = -0.039789282979540985
density_ 66 = -0.03889346622543144
density_ 67 = -0.03801217118848399
density_ 68 = -0.037174041622733967
density_ 69 = -0.03637827816760364
density_ 70 = -0.035631053663109924
density_ 71 = -0.03483977550899908
density_ 72 = -0.03421489758181906
density_ 73 = -0.03345848043068145
density_ 74 = 171.72270574405957
density_ 75 = -0.03228315392789227
density_ 76 = 22.57320090848225
density_ 77 = -0.03113740376647911
density_ 78 = 387.578859672999
density_ 79 = -0.030095748115854803
density_ 80 = -0.029612579055537935
#+END_SRC

* code

#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np
from scipy import integrate
#from scipy.misc import derivative


beta = 1
er = 1e-6
R = 1/30
epsabs = 1e-1

def xi(k, mu):
    return k**2 - mu
def n(k, mu):
    return 1 / (np.exp(beta*xi(k, mu)) - 1)
def z(omega, q, mu):
    return omega - q**2/2 + 2*mu

def pi(omega, q, k, mu):
    pi = 1 + n(k+q/2, mu) + n(-k+q/2, mu)
    pi = pi / (xi(k+q/2, mu) + xi(-k+q/2, mu) -omega)
    pi = pi * k**4
    pi = pi -k**2/2 - z(omega, q, mu)/4
    pi = pi*2 / np.pi**2
    return pi
def PI(omega, q, mu):
    zz = z(omega, q, mu)
    if zz<0:
        PI, err = integrate.quad(lambda x: pi(omega, q, x, mu), er,
                                 100, epsabs = epsabs)
    else:
        a = np.sqrt(zz/2)
        PI1, err = integrate.quad(lambda x: pi(omega, q, x, mu), er,
                                  a-er, epsabs = epsabs)
        PI2, err = integrate.quad(lambda x: pi(omega, q, x, mu), a+er,
                                  100, epsabs = epsabs)
        PI = PI1 + PI2
    PI = PI * R
    return PI
def delta(omega, q, rkv, mu):
    zz = z(omega, q, mu)
    if zz<0:
        img = 0
    else:
        k = np.sqrt(zz/2)
        img = 1 + n(k+q/2, mu) + n(-k+q/2, mu)
        img = img * R/(2*np.pi)
        img = img * k**3
    rel = PI(omega, q, mu)
    rel = rel + rkv/(4*np.pi)
    rel = rel +zz/(4*np.pi)
    delta = np.angle(rel + 1j*img) - np.pi
    return delta
def f(omega, q, rkv, mu):
    f = 1 / (np.exp(beta*omega) - 1)
    f = f * delta(omega, q, rkv, mu)
    f = 3 * f /np.pi
    return f
def F(rkv, mu):
    ff = lambda y, x: f(y, x, rkv, mu)
    F, err = integrate.dblquad(ff, er, 3, lambda x:er, lambda x:10, epsabs
                               = epsabs)
    return F

N = 100
x = np.linspace(-2, 2, N)
y = np.zeros(N)
for i in range(N):
    y[i] = F(x[i], -.5)
    print('y_',i, '=', y[i])
np.savetxt('F.txt', y)
plt.plot(x, y)
plt.show()

'''
N = 100
rkv = np.linspace(-2, 2, N)
density = np.zeros(N)
for i in range(N):
    density[i] = -derivative(lambda mu:F(rkv[i], mu), -.5, dx = 1e-8)
    print('density_', i, '=', density[i])
np.savetxt('density.txt', density)
plt.plot(rkv, density)
plt.show()
'''

#+END_SRC
