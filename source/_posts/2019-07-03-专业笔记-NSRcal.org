#+TITLE: NSR Calculate
#+DATE: <2019-07-03>
#+CATEGORIES: 专业笔记
#+TAGS: 物理, NSR Calculate
#+HTML: <!-- toc -->
#+HTML: <!-- more -->

* Free Energy vs. Renormalize Paramaters

** p-wave

*** cal

\begin{align}
  \delta^p(\vec{q}, z) =& \mathrm{Arg}\left[ \frac{Mk_{n^2}}{2}\frac{1}{R}
                 \left(
             \frac{1}{4\pi}\cdot \frac{2R}{k_n^2 v}
            + \tilde{z}\cdot\frac{1}{4\pi} 
           + \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z) 
                 \right)
                \right] \\
       =& \mathrm{Arg}\left[
             \frac{1}{4\pi}\cdot \frac{2R}{k_n^2 v}
            + \tilde{z}\cdot\frac{1}{4\pi} 
           + \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z + \mathrm{i}0^+) 
                \right]
\end{align}
其中 $\tilde{z}=z/E_n$ , $E_n = k_n^2/(2M)$ , $k_n^3 = 6\pi^2n$ , $n =
N/V$
\begin{align}
  \frac{2 R}{M k_n^2}\Pi_r(\vec{q},z) =& (k_n R)\cdot\Pi_r \cdot \frac{2}{Mk_n^3}\\
  =& \tilde{R}\left[
     \frac{2}{Mk_n^3}\left( -\frac{M}{V} \right)\sum_{\vec{k}}1
     - \tilde{z}E_n \frac{M^2}{V}\frac{2}{Mk_n^3}\sum_{\vec{k}}\frac{1}{k^2}
     + \frac{2}{Mk_n^3}\Pi^{l=1}(\vec{q},z)
    \right] \\
  =& \tilde{R}\left[ 
           -\frac{1}{\pi^2}\int \mathrm{d}\tilde{k}\cdot \tilde{k}^2
           -\tilde{z} \frac{1}{2\pi^2}\int \mathrm{d}\tilde{k}
           +\tilde{\Pi}^{l=1}
          \right]
\end{align}
其中 $\tilde{R} = k_nR$ , $\tilde{k} = k/k_n$
\begin{align}
  \tilde{\Pi}^{l=1} = &\frac{2}{Mk_n^3}\Pi^{l=1}(\vec{q},\omega) \\
   =& \frac{2}{Mk_n^3}\frac{1}{V}\frac{V}{(2\pi)^3}\int \mathrm{d}\tilde{k}
    \left[
       k^2 \cdot 4\pi |Y_{lm}(\hat{k})|^2 
       \frac{1+n(\xi_{\vec{k}+\vec{q}/2}) + n(\xi_{-\vec{k}+\vec{q}/2})}
          {\xi_{\vec{k}+\vec{q}/2} + \xi_{-\vec{k}+\vec{q}/2} - \omega}
    \right] \\
   =& \frac{2}{\pi^2}\int \mathrm{d}\tilde{k}\left[
           \frac{1+n(\xi_{\vec{k}+\vec{q}/2}) + n(\xi_{-\vec{k}+\vec{q}/2})}
          {\tilde{\xi}_{\vec{k}+\vec{q}/2} + \tilde{\xi}_{-\vec{k}+\vec{q}/2} - \tilde{\omega}}
             \right]
\end{align}
其中 $\tilde{\xi} = \xi/E_n$ , $\tilde{\omega} = \omega/E_n$ , $n(\xi)
= \frac{1}{e^{\beta \xi}-1}$

最终
\begin{align}
  \frac{\tilde{\Omega}}{N E_n} =& \frac{1}{N E_n}
    \frac{V}{(2\pi^3)}\int \mathrm{d}^3\vec{q}
   \cdot \int \frac{\mathrm{d}\omega}{\pi}\cdot n(\omega) \delta^p \\
   =& 3 \int \mathrm{d}\tilde{q}\cdot \tilde{q}^2
     \int_{-\infty}^{+\infty}\mathrm{d}\tilde{\omega}
      \cdot n(\tilde{\omega}) \tilde{\delta}^p(\vec{q},z)
\end{align}
得自由能
\begin{align}
  \frac{F}{NE_n} = \frac{\tilde{\Omega}}{N E_n} -\frac{\mu}{E_n}
\end{align}
即
\begin{align}
   f(\tilde{\mu}, \tilde{R}) = \tilde{\Omega}'(\tilde{\mu}, \tilde{R})-\tilde{\mu}
\end{align}
其中 $\tilde{\mu} = \mu/E_n$.

$\mu$ 由 
\begin{align}
  N = - \frac{\partial\Omega}{\partial \mu}
\end{align}
决定.

*** code

#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np
from scipy import integrate
zero = 1e-1
cutoff = 1
err = 1.49e-1
mu = 0
beta = 1
R = 1/30
omega = 1
eps = .1                        # infinite small imaginary part 
rkv = 0                         # 2R_p/(k_n^2 v_p)
def xi(k, mu=mu):
    xi = k**2 - mu
    return xi
def n(p, beta=beta):
    n = 1 / (np.exp(beta*xi(p)) - 1)
    return n
def z(omega, q, mu=mu):
    z = omega - 2*q - 2*mu
    return z

def PI(omega, q, eps=eps, mu=mu, zero=zero, cutoff=cutoff,
       err=err):
    def a(k):
        a = (1 + n(k+q/2) + n(-k+q/2))
        return a
    def b(k):
        b = (xi(k+q/2) + xi(-k+q/2) - omega)
        return b
    Irel, error = integrate.quad(lambda k: k**4*(a(k)*b(k)/(b(k)**2 +
                                                            eps**2)), 
                                 zero, cutoff, epsabs=err)
    Iimg, error = integrate.quad(lambda k: k**4*(a(k)*eps**2/(b(k)**2 +
                                                               eps**2)), 
                                 zero, cutoff, epsabs=err)
    I = Irel -1j * Iimg
    PI = 2/(np.pi**2) * I
    return PI
def PIr(q, omega, R=R, mu=mu, zero=zero, cutoff=cutoff, err=err):
    I, error = integrate.quad(lambda k: k**2, zero, cutoff, epsabs=err)
    PIr = -1/(np.pi**2) * I
    I, error = integrate.quad(lambda k: 1, zero, cutoff, epsabs=err)
    PIr = PIr - z(omega, q)/(2*np.pi**2) * I
    PIr = PIr + PI(omega, q)
    PIr = R * PIr
    return PIr

def delta(omega, q, rkv):
    delta = rkv/(4*np.pi) + z(omega, q) + PIr(q, omega)
    delta = np.angle(delta)
    return delta

def omegaInt(rkv, mcutoff=-cutoff, pcutoff=cutoff, cutoff=cutoff):
    f = lambda q, omega: 3 * q**2 * n(omega) * delta (q, omega, rkv)
    omegaInt, error = integrate.dblquad(f, mcutoff, pcutoff, lambda
                                        omega: 0, lambda omega: cutoff
                                        , epsabs=err) 
    return omegaInt



print(omegaInt(0))
#+END_SRC

[[file:./2019-07-03-专业笔记-NSRcal/FreeEnergy.py]]


*** result
